<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docs on Hop</title>
    <link>https://hop.apache.org/docs/</link>
    <description>Recent content in Docs on Hop</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://hop.apache.org/docs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Architecture</title>
      <link>https://hop.apache.org/docs/architecture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hop.apache.org/docs/architecture/</guid>
      <description>The architecture of Hop is very simple in essence: separate out any metadata from runtime code and tooling.
 Doing this, Hop aims to have a minimal installation footprint and wants to be stateless to facilitate execution on a variety of platforms like Spark and Flink, but also in a variety of scenarios like running in different life cycles such as development, test, acceptance, production, unit testing and continuous integration.</description>
    </item>
    
    <item>
      <title>Q&amp;A</title>
      <link>https://hop.apache.org/docs/qa/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hop.apache.org/docs/qa/</guid>
      <description>Is this a fork?
  Yes this is a fork, in the sense that we used Kettle 8.2.0.7 as a starting point for Apache Hop. Apache Hop wants to used that as a starting point to explore the future of data integration. Check out the Roadmap and Architecture sections.
     Is this a hostile fork?
  By all means no! Kettle will remain a stable and trustworthy platform for data integration.</description>
    </item>
    
    <item>
      <title>Roadmap</title>
      <link>https://hop.apache.org/docs/roadmap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hop.apache.org/docs/roadmap/</guid>
      <description>The Apache Hop team just released version 0.99. It offers our users the chance to test critical functionality before version 1.0 is released.
 After that our community wants to graduate as a top level project.
 Here are a few directions that we want to explore for the future of our software: * Set up a software marketplace where 3rd party plugins can be found * Pluggable field expressions in transforms and actions * Integration with Apache Airflow both in Airflow and as a new Workflow engine plugin * Modularisation of the Apache Beam plugins * Further unification of Beam plugins, for example make the Beam BigQuery Input plugin work in non-Beam engines as well * Finish conversion of all plugins to generic XML serialization to allow for JSON/YAML/…​ metadata serialization of pipelines and workflows * Create a new GUI for executing, previewing and debugging pipelines and workflows with care for long-running and streaming workloads * Create a monitoring and logging network service capable of accepting operational metadata from local and remote Hop executions, even on clusters (Beam) * Convert the Neo4j logging perspective to a generic logging perspective with room for plugins exposing the underlying strength of the logging sink.</description>
    </item>
    
  </channel>
</rss>
